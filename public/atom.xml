<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.starmoon.tech/"/>
  <updated>2020-01-07T14:40:07.478Z</updated>
  <id>http://www.starmoon.tech/</id>
  
  <author>
    <name>Horizon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>windows搭建django框架本地环境</title>
    <link href="http://www.starmoon.tech/2020/01/07/windows%E6%90%AD%E5%BB%BAdjango%E6%A1%86%E6%9E%B6%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.starmoon.tech/2020/01/07/windows%E6%90%AD%E5%BB%BAdjango%E6%A1%86%E6%9E%B6%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83/</id>
    <published>2020-01-07T14:39:41.000Z</published>
    <updated>2020-01-07T14:40:07.478Z</updated>
    
    <content type="html"><![CDATA[<p>这是我最终搭建好的环境<br>python 3.8.0<br>django 3.0.2</p><p>1.在安装django框架之前，得确保本地环境有python和pip,pip是一个包依赖管理工具。<br>中间解决了pip更新问题，按照提示安装与python匹配的pip版本；</p><p>这是python安装参考教程：<br><a href="https://baijiahao.baidu.com/s?id=1606573927720991570&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1606573927720991570&amp;wfr=spider&amp;for=pc</a></p><p>中间出现过这个问题：<br>WARNING: You are using pip version 19.2.3, however version 19.3.1 is available.<br>当直接输入python -m pip install –upgrade pip更新还报错的时候，<br>输入命令：python -m pip install -U pip</p><p>2.pip install Django==3.0.2<br>在pip安装过程中(python pip安装第三方库超时问题（raise ReadTimeoutErrorself._pool, None, ‘Read timed out.’)<br>方案一：pip下载超时处理<br>pip –default-timeout=100 install 第三方库名<br>但是发现依然下载太慢解决不了问题<br>方案二：更换安装源<br>不用改pip的配置文件<br>安装python的库函数只要<br>python -m pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a> pack_name</p><p>3.直到在命令行窗口输出可以看到版本信息，证明安装成功</p><p>4.创建django项目<br>django-admin startproject 项目名称<br>例：django-admin startproject mytest</p><p>4.创建django应用<br>项目创建完成后需要有具体的应用，一个项目下可以有多个应用。<br>进入命令行窗口：<br>python manage.py startapp 应用名称<br>例：python manage.py startapp myapp</p><p>5.在项目设置添加应用<br>打开mytest/settings.py,INSTALLED_APPS下添加：</p><p>6.在终端启动django自带的测试用服务器：<br>python manage.py runserver ip:port<br>例：python manage.py runserver</p><p>说明：ip和port可以分别设置服务器的ip和端口；省略不写默认ip为127.0.0.1；端口：8000；</p><p>7.打开浏览器输入<a href="http://127.0.0.1:8000，得到网页：" target="_blank" rel="noopener">http://127.0.0.1:8000，得到网页：</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是我最终搭建好的环境&lt;br&gt;python 3.8.0&lt;br&gt;django 3.0.2&lt;/p&gt;
&lt;p&gt;1.在安装django框架之前，得确保本地环境有python和pip,pip是一个包依赖管理工具。&lt;br&gt;中间解决了pip更新问题，按照提示安装与python匹配的pip版
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>nginx配置https访问域名</title>
    <link href="http://www.starmoon.tech/2019/12/27/nginx%E9%85%8D%E7%BD%AEhttps%E8%AE%BF%E9%97%AE%E5%9F%9F%E5%90%8D/"/>
    <id>http://www.starmoon.tech/2019/12/27/nginx%E9%85%8D%E7%BD%AEhttps%E8%AE%BF%E9%97%AE%E5%9F%9F%E5%90%8D/</id>
    <published>2019-12-27T15:27:22.000Z</published>
    <updated>2019-12-30T14:05:37.066Z</updated>
    
    <content type="html"><![CDATA[<p>在腾讯云搜索 ssl 证书，申请免费证书：</p><p><img src="https://www.blog.starmoon.tech/img/clipboard.png" alt></p><p>这里建议选择手动 DNS 验证设置，之前我选择的是文件验证，创建了文件之后，等待颁发的时间已经超过了 3 天，而手动 DNS 验证的时间在 10 分钟到 24h 以内。如果手动验证 DNS 不行，请再选择文件验证。<br><img src="https://www.blog.starmoon.tech/img/clipboard2.png" alt></p><p>参考详细说明，添加解析记录，因为我的域名是在阿里云买的，所以按照说明在阿里云添加了相应的记录。<br>打开阿里云后台按照腾讯云的文档添加 DNS 解析配置</p><p><img src="https://www.blog.starmoon.tech/img/clipboard3.png" alt></p><p>解析添加完成之后，等待证书颁发，下载证书文件。<br>按照腾讯云给的文档在 nginx 下面安装：<br><a href="https://cloud.tencent.com/developer/article/1170977" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1170977</a></p><p><code>特别说明：</code></p><figure class="highlight plain"><figcaption><span>&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    listen 80 default_server;</span><br><span class="line">    listen [::]:80 default_server;</span><br><span class="line">    server_name example.com www.example.com;</span><br><span class="line">   //这里指的是访问80端口临时重定向到443端口，302就是永久重定向</span><br><span class="line">    return 301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 这样访问 http 时会跳转到 https;</p><p>关于防火墙我使用的是 ufw, sudo ufw status（这里跟文中不太一样）</p><p><img src="https://www.blog.starmoon.tech/img/clipboard4.png" alt></p><p>请确保防火墙打开了<code>443端口</code>:sudo ufw allow 443<br>nginx 重启：<code>sudo systemctl restart nginx</code></p><p>nginx 如果重启失败可以去查看 nginx 错误日志定位问题 cd /var/log/nginx</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在腾讯云搜索 ssl 证书，申请免费证书：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.blog.starmoon.tech/img/clipboard.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;这里建议选择手动 DNS 验证设置，之前我选择的是文件验证，创建了文件之
      
    
    </summary>
    
    
    
      <category term="nginx" scheme="http://www.starmoon.tech/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>jquery datatable 表格组件使用方法</title>
    <link href="http://www.starmoon.tech/2019/12/24/jquery-datatable-%E8%A1%A8%E6%A0%BC%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://www.starmoon.tech/2019/12/24/jquery-datatable-%E8%A1%A8%E6%A0%BC%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2019-12-24T14:26:12.000Z</published>
    <updated>2019-12-30T14:05:37.062Z</updated>
    
    <content type="html"><![CDATA[<p><code>1.php后台自定义逻辑部分：</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public function productIndexData(\Illuminate\Http\Request $request)</span><br><span class="line">    &#123;</span><br><span class="line">        $data = [];</span><br><span class="line"></span><br><span class="line">       //中间需要以数组的形式封装好需要传递的list</span><br><span class="line"></span><br><span class="line">        $count = $this-&gt;getTotalItemCount($request);</span><br><span class="line"></span><br><span class="line">        $data[&quot;recordsTotal&quot;] = $count;</span><br><span class="line">        $data[&quot;recordsFiltered&quot;] = $count;</span><br><span class="line">        $data[&quot;data&quot;] = $productlist;</span><br><span class="line"></span><br><span class="line">        return response()-&gt;json($data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>Attention:</code>工具类（后台必须返回 datatables 要求的数据格式，否则不能正常展示数据，该工具类必须返回的数据有 recordsTotal 和 recordsFiltered 和 data 这 3 个参数！）</p><p><code>2.html部分：</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;table class=&quot;table table-striped- table-bordered table-hover table-bg table-sort table-checkable&quot;</span><br><span class="line">id=&quot;kt_table_1&quot;&gt;</span><br><span class="line">&lt;thead style=&quot;white-space:nowrap;&quot;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/thead&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p><code>3.js部分：</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line">    $(&quot;#kt_table_1&quot;).DataTable(&#123;</span><br><span class="line">        retrieve: true,</span><br><span class="line">        paging: true,</span><br><span class="line">        ordering: true,</span><br><span class="line">        info: true,</span><br><span class="line">        autoWidth: false,</span><br><span class="line">        searching: true,  /* 搜索框 */</span><br><span class="line">        order: [[0, &apos;desc&apos;]],</span><br><span class="line">        bPaginate: true,</span><br><span class="line">        processing: true,</span><br><span class="line">        bAutoWidth: true,</span><br><span class="line">        pagingType: &quot;simple&quot;, //分页样式：simple,simple_numbers,full,full_numbers，</span><br><span class="line">        bFilter: false, //去掉搜索方法</span><br><span class="line">        bLengthChange: true, //也是页面上确认是否可以进行选择一页展示多少条</span><br><span class="line">        serverSide: true, //启用服务器端分页，要进行后端分页必须的环节</span><br><span class="line">        ajax: function(data, callback, settings) &#123;</span><br><span class="line"></span><br><span class="line">            // 封装相应的请求参数</span><br><span class="line">            var pagesize = data.length; //页面显示记录条数，在页面显示每页显示多少项的时候,页大小</span><br><span class="line">            var start = data.start; //开始的记录序号</span><br><span class="line">            var page = (data.start) / data.length + 1; //当前页码</span><br><span class="line">            var order = data.order;</span><br><span class="line">            var search = data.search;</span><br><span class="line"></span><br><span class="line">            //后端排序</span><br><span class="line">            if (order[0].column == 0) &#123;</span><br><span class="line">                ordercolumn = &apos;id&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">            if (order[0].column == 9) &#123;</span><br><span class="line">                ordercolumn = &apos;validator.created_time&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">            if (order[0].column == 11) &#123;</span><br><span class="line">                ordercolumn = &apos;validator.valid&apos;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            var data = &#123;</span><br><span class="line">                page: page,</span><br><span class="line">                ordercolumn: ordercolumn,</span><br><span class="line">                orderdir: order[0].dir,</span><br><span class="line">                pagesize: pagesize, //这里只传了当前页和页大小，如果有其他参数，可继续封装</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //这里需要获取被选择的日期，此处是页面有个日期选择器daterangetimepicker</span><br><span class="line">            var dateRange = $(&apos;#kt_daterangepicker_6 .form-control&apos;).val();</span><br><span class="line"></span><br><span class="line">            if (dateRange) &#123;</span><br><span class="line">                dateRange = dateRange.split(&quot;/&quot;);</span><br><span class="line">                var startDate = dateRange[0].replace(/\s/g, &apos;&apos;);</span><br><span class="line">                var endDate = dateRange[1].replace(/\s/g, &apos;&apos;);</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                var endDate = moment().format(&apos;YYYY-MM-DD HH:mm:ss&apos;);</span><br><span class="line">                var startDate = moment().subtract(14, &apos;days&apos;).format(&apos;YYYY-MM-DD HH:mm:ss&apos;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            var json = &#123;</span><br><span class="line">                dataArray: JSON.stringify(data),</span><br><span class="line">                start_date: startDate,</span><br><span class="line">                end_date: endDate,</span><br><span class="line">                search: search[&apos;value&apos;].trim(),</span><br><span class="line">                barcode: $(&quot;#samebarcode&quot;).val(),</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type: &quot;POST&quot;,</span><br><span class="line">                url: &quot;productIndexData&quot;,</span><br><span class="line">                headers: &#123;</span><br><span class="line">                    &apos;X-CSRF-TOKEN&apos;: $(&apos;meta[name=&quot;csrf-token&quot;]&apos;).attr(&apos;content&apos;)</span><br><span class="line">                &#125;,</span><br><span class="line">                cache: false, //禁用缓存</span><br><span class="line">                data: json, //传入已封装的参数</span><br><span class="line">                dataType: &quot;json&quot;, //返回数据格式为json</span><br><span class="line">                success: function(data) &#123;</span><br><span class="line">                    var arr = &quot;&quot;;</span><br><span class="line">                    if (&apos;object&apos; == typeof data) &#123;</span><br><span class="line">                        arr = data;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        arr = $.parseJSON(data); //将json字符串转化为了一个Object对象</span><br><span class="line">                    &#125;</span><br><span class="line">                    console.log(&quot;============数据===========&quot;)</span><br><span class="line">                    console.log(arr);</span><br><span class="line">                    var returnData = &#123;&#125;;</span><br><span class="line">                    //这里直接自行返回了draw计数器,应该由后台返回,可注释掉</span><br><span class="line">                    // returnData.draw = arr.data.pagination.pageCount;</span><br><span class="line">                    //totalCount指的是总记录数</span><br><span class="line">                    returnData.recordsTotal = arr.recordsTotal;</span><br><span class="line">                    //后台不实现过滤功能,全部的记录数都需输出到前端，记录数为总数</span><br><span class="line">                    returnData.recordsFiltered = arr.recordsFiltered;</span><br><span class="line">                    returnData.data = arr.data; //返回用户数据列表</span><br><span class="line">                    console.log(returnData);</span><br><span class="line">                    callback(returnData);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    //渲染后的tbody element，如果有需要可以这样获取</span><br><span class="line">                    var table = $(&apos;#kt_table_1&apos;).DataTable();</span><br><span class="line">                    var element = table.table().body();</span><br><span class="line">                &#125;,</span><br><span class="line">                error: function(XMLHttpRequest, textStatus, errorThrown) &#123;</span><br><span class="line">                    // $dialog.alert(&quot;查询失败&quot;);</span><br><span class="line">                    // $wrapper.spinModal(false);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        columns: [&#123;</span><br><span class="line">                &quot;data&quot;: &quot;skuid&quot;,//第一列</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;data&quot;: &quot;barcode&quot;,</span><br><span class="line">                orderable: false,</span><br><span class="line">                render: function(data, type, row, meta) &#123;</span><br><span class="line">                    var barcode = row.barcode;</span><br><span class="line">                    return &quot;&lt;a href=javascript:void(0) &quot; + &apos;onclick=&apos; +</span><br><span class="line">                        &apos;sameBarcodeSearch&apos; + &apos;(&apos; + barcode + &apos;)&apos; + &quot;&gt;&quot; + barcode +</span><br><span class="line">                        &apos;&lt;/a&gt;&apos;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;data&quot;: &quot;userid&quot;,</span><br><span class="line">                orderable: false,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;data&quot;: &quot;user_name&quot;,</span><br><span class="line">                orderable: false,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;data&quot;: &quot;cart_url&quot;,</span><br><span class="line">                orderable: false,</span><br><span class="line">                //如果某列需要展示图片</span><br><span class="line">                render: function(data, type, row, meta) &#123;</span><br><span class="line">                    var skuid = row.skuid;</span><br><span class="line">                    var cart_url = row.cart_url;</span><br><span class="line">                    return &apos;&lt;img src=&apos; + &apos;https://&apos; + window.location.host +</span><br><span class="line">                        &apos;/downloadPicture?url=&apos; + cart_url + &apos;  width=&quot;50px&quot;/&gt;&apos; +</span><br><span class="line">                        &apos;&lt;button style=&quot;position:relative;&quot;&gt;&apos; + &apos;replace&apos; + &apos;&lt;input&apos; +</span><br><span class="line">                        &apos; type=&quot;file&quot;&apos; + &apos;accept=&quot;image/*&quot;&apos; +</span><br><span class="line">                        &apos;style=&quot;opacity:0;width:100%;height:100%;position:absolute;top:0;left:0&quot;&apos; +</span><br><span class="line">                        &apos;onclick=&quot;&apos; + &apos;getImageInfo(&apos; + skuid + &apos;)&apos; +</span><br><span class="line">                        &apos;&quot; onchange=&quot;replaceImage()&quot;  &gt;&apos; + &apos;&lt;/button&gt;&apos;;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;data&quot;: &quot;marker&quot;,</span><br><span class="line">                orderable: false,</span><br><span class="line">                render: function(data, type, row, meta) &#123;</span><br><span class="line">                    if (row.marker_bundle_id != 0) &#123;</span><br><span class="line">                        return &apos;YES&apos;;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        return &apos;NO&apos;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        /* 自定义的一些列操作 */</span><br><span class="line">        columnDefs: [&#123;</span><br><span class="line">                targets: 10,</span><br><span class="line">                orderable: false, //禁止排序</span><br><span class="line">                render: function(data, type, row, meta) &#123;</span><br><span class="line">                    var skuid = row.skuid;</span><br><span class="line">                    return &apos;&lt;button class=&quot;&apos; + &apos;btn btn-primary disabled&apos; +</span><br><span class="line">                        &apos; kt-badge--inline kt-badge--pill&quot;  onclick=&quot;&apos; + &apos;ajax_action(&apos; +</span><br><span class="line">                        skuid + &apos;)&apos; + &apos;&quot; data-toggle=&quot;modal&quot; data-target=&quot;#kt_modal_4&quot; &apos; +</span><br><span class="line">                        &apos;value=&apos; + skuid + &apos;&gt;&apos; + &apos;Edit&apos; + &apos;&lt;/button&gt;&apos;;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                targets: 11,</span><br><span class="line">                width: &apos;80px&apos;,</span><br><span class="line">                render: function(data, type, row, meta) &#123;</span><br><span class="line">                    var status = &#123;</span><br><span class="line">                        1: &#123;</span><br><span class="line">                            &apos;title&apos;: &apos;Disable&apos;,</span><br><span class="line">                            &apos;class&apos;: &apos;btn btn-outline-warning&apos;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        0: &#123;</span><br><span class="line">                            &apos;title&apos;: &apos;Enable&apos;,</span><br><span class="line">                            &apos;class&apos;: &apos;btn btn-warning&apos;</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;;</span><br><span class="line">                    if (typeof status[data] === &apos;undefined&apos;) &#123;</span><br><span class="line">                        return data;</span><br><span class="line">                    &#125;</span><br><span class="line">                    var skuid = row.skuid;</span><br><span class="line">                    var barcode = row.barcode;</span><br><span class="line">                    if (row.creation_verified == 1) &#123;</span><br><span class="line"></span><br><span class="line">                        return &apos;&lt;button class=&quot;&apos; + status[data].class + &apos; &quot;  onclick=&quot;&apos; +</span><br><span class="line">                            &apos;ajax_check_action(&apos; + skuid + &apos;,&apos; + barcode + &apos;,&apos; +</span><br><span class="line">                            &quot;&apos;disable&apos;&quot; + &apos;)&apos; +</span><br><span class="line">                            &apos;&quot; data-toggle=&quot;modal&quot; data-target=&quot;#kt_modal_2&quot; &gt;&apos; + status[</span><br><span class="line">                                data].title + &apos;&lt;/button&gt;&apos;;</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;1.php后台自定义逻辑部分：&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="jquery" scheme="http://www.starmoon.tech/categories/jquery/"/>
    
    
      <category term="datatables" scheme="http://www.starmoon.tech/tags/datatables/"/>
    
  </entry>
  
  <entry>
    <title>response 状态码</title>
    <link href="http://www.starmoon.tech/2019/12/18/response%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>http://www.starmoon.tech/2019/12/18/response%E7%8A%B6%E6%80%81%E7%A0%81/</id>
    <published>2019-12-18T14:00:52.000Z</published>
    <updated>2019-12-30T14:05:37.068Z</updated>
    
    <content type="html"><![CDATA[<p>100：继续 客户端应当继续发送请求。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。</p><p>101： 转换协议 在发送完这个响应最后的空行后，服务器将会切换到在 Upgrade 消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采取类似措施。</p><p>102：继续处理 由 WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</p><p>200：请求成功 处理方式：获得响应的内容，进行处理</p><p>201：请求完成，结果是创建了新资源。新创建资源的 URI 可在响应的实体中得到 处理方式：爬虫中不会遇到</p><p>202：请求被接受，但处理尚未完成 处理方式：阻塞等待</p><p>204：服务器端已经实现了请求，但是没有返回新的信 息。如果客户是用户代理，则无须为此更新自身的文档视图。 处理方式：丢弃</p><p>300：该状态码不被 HTTP/1.0 的应用程序直接使用， 只是作为 3XX 类型回应的默认解释。存在多个可用的被请求资源。 处理方式：若程序中能够处理，则进行进一步处理，如果程序中不能处理，则丢弃</p><p>301：请求到的资源都会分配一个永久的 URL，这样就可以在将来通过该 URL 来访问此资源 处理方式：重定向到分配的 URL</p><p>302：请求到的资源在一个不同的 URL 处临时保存 处理方式：重定向到临时的 URL</p><p>304：请求的资源未更新 处理方式：丢弃</p><p>400：非法请求 处理方式：丢弃</p><p>401：未授权 处理方式：丢弃</p><p>403：禁止 处理方式：丢弃</p><p>404：没有找到 处理方式：丢弃</p><p>500：服务器内部错误 服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现。</p><p>501：服务器无法识别 服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</p><p>502：错误网关 作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p><p>503：服务出错 由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;100：继续 客户端应当继续发送请求。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。&lt;/p&gt;
&lt;p&gt;101： 转换协议 在发送完这个响应最后的空行后，服务器将会切换到在 Upgrade 消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采
      
    
    </summary>
    
    
    
      <category term="base" scheme="http://www.starmoon.tech/tags/base/"/>
    
  </entry>
  
  <entry>
    <title>git clone error: RPC failed;</title>
    <link href="http://www.starmoon.tech/2019/12/17/git-clone-error-RPC-failed/"/>
    <id>http://www.starmoon.tech/2019/12/17/git-clone-error-RPC-failed/</id>
    <published>2019-12-17T13:30:43.000Z</published>
    <updated>2019-12-30T14:05:37.052Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git-clone-时发现项目一直反复克隆不下来，并且报错"><a href="#git-clone-时发现项目一直反复克隆不下来，并且报错" class="headerlink" title="git clone 时发现项目一直反复克隆不下来，并且报错"></a>git clone 时发现项目一直反复克隆不下来，并且报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">remote: Counting objects: 100% (1640/1640), done.</span><br><span class="line">remote: Compressing objects: 100% (1167/1167), done.</span><br><span class="line">error: RPC failed; curl 18 transfer closed with outstanding read data remaining</span><br><span class="line">fatal: the remote end hung up unexpectedly</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure><p>于是使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http://github.com/large-repository --depth 1</span><br></pre></td></tr></table></figure><p>depth 用于指定克隆深度，为 1 即表示只克隆最近一次 commit.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd large-repository</span><br></pre></td></tr></table></figure><p>然后再使用 –unshallow 参数把之前的历史重新再 pull 下来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch --unshallow</span><br></pre></td></tr></table></figure><p>方法 1. 推荐 proxychains 代理，或者挂米国 VPS</p><p>方法 2. 把 https 改成 http</p><p>方法 3. 在 release 中选择 download 而非 clone 完整仓库，缺点：没有.git 本地仓库，不能 commit，push</p><p>方法 4. git clone –depth=1 ,这样只 clone 当前最新的 commit 版本，缺点：没有.git 本地仓库，不能 commit，push</p><p>方法 5. 在国内同类代码托管网站查找是否有同样的源码，从国内镜像下载。</p><p>方法 6.网速不好，查看网络情况</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;git-clone-时发现项目一直反复克隆不下来，并且报错&quot;&gt;&lt;a href=&quot;#git-clone-时发现项目一直反复克隆不下来，并且报错&quot; class=&quot;headerlink&quot; title=&quot;git clone 时发现项目一直反复克隆不下来，并且报错&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Git" scheme="http://www.starmoon.tech/categories/Git/"/>
    
    
      <category term="git clone" scheme="http://www.starmoon.tech/tags/git-clone/"/>
    
  </entry>
  
  <entry>
    <title>laravel orm 优化实用技巧</title>
    <link href="http://www.starmoon.tech/2019/12/15/laravel-orm-%E4%BC%98%E5%8C%96%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://www.starmoon.tech/2019/12/15/laravel-orm-%E4%BC%98%E5%8C%96%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2019-12-15T06:36:35.000Z</published>
    <updated>2019-12-30T14:05:37.065Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-如果要实现某个整型字段的递增或者递减"><a href="#1-如果要实现某个整型字段的递增或者递减" class="headerlink" title="1.如果要实现某个整型字段的递增或者递减"></a>1.如果要实现某个整型字段的递增或者递减</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Article::find($article_id)-&gt;increment(&apos;read_count&apos;);</span><br><span class="line">Article::find($article_id)-&gt;increment(&apos;read_count&apos;,10);</span><br><span class="line">Article::find($article_id)-&gt;decrement(&apos;read_count&apos;);</span><br></pre></td></tr></table></figure><p>代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$article = Article::find($article_id);</span><br><span class="line">$article-&gt;read_count++;</span><br><span class="line">$article-&gt;save();</span><br></pre></td></tr></table></figure><h3 id="2-先执行-X-方法，X-方法执行不成功则执行-Y-方法"><a href="#2-先执行-X-方法，X-方法执行不成功则执行-Y-方法" class="headerlink" title="2.先执行 X 方法，X 方法执行不成功则执行 Y 方法"></a>2.先执行 X 方法，X 方法执行不成功则执行 Y 方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user = User::findOrFail($id);</span><br></pre></td></tr></table></figure><p>代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$user = User::find($id);</span><br><span class="line">if (!$user) &#123; abort (404); &#125;</span><br></pre></td></tr></table></figure><h3 id="3-在一个-Eloquent-模型中，有个神奇的地方，叫-boot-，用它可以覆盖默认的行为："><a href="#3-在一个-Eloquent-模型中，有个神奇的地方，叫-boot-，用它可以覆盖默认的行为：" class="headerlink" title="3.在一个 Eloquent 模型中，有个神奇的地方，叫 boot()，用它可以覆盖默认的行为："></a>3.在一个 Eloquent 模型中，有个神奇的地方，叫 boot()，用它可以覆盖默认的行为：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class User extends Model</span><br><span class="line">&#123;</span><br><span class="line">    public static function boot()</span><br><span class="line">    &#123;</span><br><span class="line">        parent::boot();</span><br><span class="line">        static::updating(function($model)</span><br><span class="line">        &#123;</span><br><span class="line">            // 写点日志啥的</span><br><span class="line">            // 覆盖一些属性，类似这样 $model-&gt;something = transform($something);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-带条件与排序的关联关系"><a href="#4-带条件与排序的关联关系" class="headerlink" title="4. 带条件与排序的关联关系"></a>4. 带条件与排序的关联关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function approvedUsers() &#123;</span><br><span class="line">    return $this-&gt;hasMany(&apos;App\User&apos;)-&gt;where(&apos;approved&apos;, 1)-&gt;orderBy(&apos;email&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-通过-ID-查询多条记录"><a href="#5-通过-ID-查询多条记录" class="headerlink" title="5.通过 ID 查询多条记录"></a>5.通过 ID 查询多条记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$users = User::find([1,2,3]);</span><br></pre></td></tr></table></figure><p>这个方法可以接受多个 ID 的数组作为参数.</p><h3 id="6-WhereX"><a href="#6-WhereX" class="headerlink" title="6.WhereX"></a>6.WhereX</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$users = User::whereApproved(1)-&gt;get();</span><br></pre></td></tr></table></figure><p>代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$users = User::where(&apos;approved&apos;, 1)-&gt;get();</span><br></pre></td></tr></table></figure><h3 id="7-一对多返回默认模型对象"><a href="#7-一对多返回默认模型对象" class="headerlink" title="7.一对多返回默认模型对象"></a>7.一对多返回默认模型对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public function author()</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;belongsTo(&apos;App\Author&apos;)-&gt;withDefault([</span><br><span class="line">        &apos;name&apos; =&gt; &apos;Guest Author&apos;</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-复制：复制一行的副本"><a href="#8-复制：复制一行的副本" class="headerlink" title="8.复制：复制一行的副本"></a>8.复制：复制一行的副本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$task = Tasks::find(1);</span><br><span class="line">$newTask = $task-&gt;replicate();</span><br><span class="line">$newTask-&gt;save();</span><br></pre></td></tr></table></figure><h3 id="9-php-artisan-make-model-Company-mcr"><a href="#9-php-artisan-make-model-Company-mcr" class="headerlink" title="9.php artisan make:model Company -mcr"></a>9.php artisan make:model Company -mcr</h3><p>-m 将创建一个迁移文件</p><p>-c 将创建一个控制器</p><p>-r 表示控制器应该是一个资源控制器</p><h3 id="10-update-的结果是什么？"><a href="#10-update-的结果是什么？" class="headerlink" title="10. update () 的结果是什么？"></a>10. update () 的结果是什么？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result 会包含受影响的行。 因此如果你想检查多少行受影响， 你不需要额外调用其他任何内容 -- update() 方法会给你返回此数字。</span><br></pre></td></tr></table></figure><h3 id="补充-11-find-、findOrFail-、first-、firstOrFail-、get-、list-、toArray-的区别是什么？"><a href="#补充-11-find-、findOrFail-、first-、firstOrFail-、get-、list-、toArray-的区别是什么？" class="headerlink" title="补充 11.find()、findOrFail()、first()、firstOrFail()、get()、list()、toArray()的区别是什么？"></a>补充 11.find()、findOrFail()、first()、firstOrFail()、get()、list()、toArray()的区别是什么？</h3><p>find($id) takes an id and returns a single model. If no matching model exist, it returns null.</p><p>findOrFail($id) takes an id and returns a single model. If no matching model exist, it throws an error1.</p><p>first() returns the first record found in the database. If no matching model exist, it returns null.</p><p>firstOrFail() returns the first record found in the database. If no matching model exist, it throws an error1.</p><p>get() returns a collection of models matching the query.</p><p>pluck($column) returns a collection of just the values in the given column. In previous versions of Laravel this method was called lists.</p><p>toArray() converts the model/collection into a simple PHP array.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-如果要实现某个整型字段的递增或者递减&quot;&gt;&lt;a href=&quot;#1-如果要实现某个整型字段的递增或者递减&quot; class=&quot;headerlink&quot; title=&quot;1.如果要实现某个整型字段的递增或者递减&quot;&gt;&lt;/a&gt;1.如果要实现某个整型字段的递增或者递减&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="laravel" scheme="http://www.starmoon.tech/categories/laravel/"/>
    
    
      <category term="orm模型" scheme="http://www.starmoon.tech/tags/orm%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Http/Https的区别</title>
    <link href="http://www.starmoon.tech/2019/12/11/Http-Https/"/>
    <id>http://www.starmoon.tech/2019/12/11/Http-Https/</id>
    <published>2019-12-11T15:11:46.000Z</published>
    <updated>2019-12-30T14:05:37.050Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-get-和-post-请求方法的区别？"><a href="#1-get-和-post-请求方法的区别？" class="headerlink" title="1.get 和 post 请求方法的区别？"></a>1.get 和 post 请求方法的区别？</h3><p>get 在做后退按钮或者刷新的时候不会有什么影响，但是 post 数据就会被重新提交<br>get 可以被收藏为书签，而 post 请求不可能被收藏为书签<br>安全性而言，get 比 post 相比较而言要差一些，get 请求的数据会显示在 url 中，而 post 则不会，对于一些比较敏感的信息一般会采用 post 请求；</p><p>HTTPS 在 HTTP 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。<br>https 的工作原理：客户端使用 https 的 url 与服务器建立 ssl 连接，服务器发给客户端一些证书信息，其中包含公钥，客户端与浏览器开始协商 ssl 连接的等级，也就是信息加密的等级，然后客户端的浏览器建立会话密钥，利用网站的公钥将密钥解密，传送给网站。web 服务器利用自己的私钥解密出会话密钥，完成通信。</p><h3 id="2-HTTPS-的优点"><a href="#2-HTTPS-的优点" class="headerlink" title="2.HTTPS 的优点"></a>2.HTTPS 的优点</h3><p>尽管 HTTPS 并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但 HTTPS 仍是现行架构下最安全的解决方案，主要有以下几个好处：<br>　　（1）使用 HTTPS 协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；<br>　　（2）HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 http 协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。<br>　　（3）HTTPS 是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。<br>　　（4）谷歌曾在 2014 年 8 月份调整搜索引擎算法，并称“比起同等 HTTP 网站，采用 HTTPS 加密的网站在搜索结果中的排名将会更高”。</p><h3 id="3-HTTPS-的缺点"><a href="#3-HTTPS-的缺点" class="headerlink" title="3.HTTPS 的缺点"></a>3.HTTPS 的缺点</h3><p>虽然说 HTTPS 有很大的优势，但其相对来说，还是存在不足之处的：<br>　　（1）HTTPS 协议握手阶段比较费时，会使页面的加载时间延长近 50%，增加 10%到 20%的耗电；<br>　　（2）HTTPS 连接缓存不如 HTTP 高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；<br>　　（3）SSL 证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。<br>　 （4）SSL 证书通常需要绑定 IP，不能在同一 IP 上绑定多个域名，IPv4 资源不可能支撑这个消耗。<br>　　（5）HTTPS 协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL 证书的信用链体系并不安全，特别是在某些国家可以控制 CA 根证书的情况下，中间人攻击一样可行。</p><h3 id="4-关于-ssl-证书"><a href="#4-关于-ssl-证书" class="headerlink" title="4.关于 ssl 证书"></a>4.关于 ssl 证书</h3><p>SSL 证书就是遵守 SSL 协议，由受信任的数字证书颁发机构 CA，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能。<br>SSL 证书依据功能和品牌不同分类有所不同，但 SSL 证书作为国际通用的产品，最为重要的便是产品兼容性（即证书根预埋技术），因为他解决了网民登录网站的信任问题，网民可以通过 SSL 证书轻松识别网站的真实身份。SSL 证书分为如下种类：<br>扩展验证型(EV)SSL 证书<br>组织验证型(OV)SSL 证书<br>域名验证型(DV)SSL 证书</p><p>SSL 证书又分为单域名版，多域名版，和通配符版。腾讯阿里这些云服务提供商都有免费的单域名 SSL 证书可以申请。<br>关于如何配置 SSL 证书，可以参考我的另一篇文章：<br><a href="https://www.blog.starmoon.tech/2019/12/27/nginx%E9%85%8D%E7%BD%AEhttps%E8%AE%BF%E9%97%AE%E5%9F%9F%E5%90%8D/" target="_blank" rel="noopener">https://www.blog.starmoon.tech/2019/12/27/nginx%E9%85%8D%E7%BD%AEhttps%E8%AE%BF%E9%97%AE%E5%9F%9F%E5%90%8D/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-get-和-post-请求方法的区别？&quot;&gt;&lt;a href=&quot;#1-get-和-post-请求方法的区别？&quot; class=&quot;headerlink&quot; title=&quot;1.get 和 post 请求方法的区别？&quot;&gt;&lt;/a&gt;1.get 和 post 请求方法的区别？&lt;/
      
    
    </summary>
    
    
      <category term="base" scheme="http://www.starmoon.tech/categories/base/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo-windows本地环境部署教程</title>
    <link href="http://www.starmoon.tech/2019/11/30/hexo-windows%E7%8E%AF%E5%A2%83%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
    <id>http://www.starmoon.tech/2019/11/30/hexo-windows%E7%8E%AF%E5%A2%83%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</id>
    <published>2019-11-30T06:35:15.000Z</published>
    <updated>2019-12-30T14:05:37.059Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：<a href="https://www.cnblogs.com/xingyunblog/p/8675681.html" target="_blank" rel="noopener">https://www.cnblogs.com/xingyunblog/p/8675681.html</a><br>当在 cmd 模式下 npm –version 发现 nodejs 和 npm 安装失败时，需要配置 nodejs 和 npm 的环境变量</p><p>我是安装在 D 盘这个位置 D:\Program Files\nodejs</p><p>1.首先在 node.js 的安装目录新建两个文件夹 node_global 和 node_cache<br><img src="https://www.blog.starmoon.tech/img/hexo_windows1.png" alt></p><p>2.cmd 窗口输入以下两行命令：</p><p>npm config set prefix “D:\Program Files\nodejs\node_global”</p><p>npm config set cache “D:\Program Files\nodejs\node_cache”</p><p>3.在环境变量中新建系统变量：<br><img src="https://www.blog.starmoon.tech/img/hexo_windows2.png" alt></p><p>4.修改【用户变量】中的 path 变量，将 C:\Users\hua\AppData\Roaming\npm 修改为 D:\install\nodejs\node_global</p><p><img src="https://www.blog.starmoon.tech/img/hexo_windows3.png" alt><br>5.npm install -g hexo-cli<br><img src="https://www.blog.starmoon.tech/img/hexo_windows4.png" alt></p><p>发现运行很慢，解决办法就是修改 npm 的安装源，这里选择淘宝 NPM 镜像，这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10 分钟 一次以保证尽量与官方服务同步。执行 npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><p>6.在 hexo 博客项目文件夹下面，hexo server,如果遇到<br>bash: hexo command not found 问题解决，那么请先配置环境变量，在 Path 里添加你的 node_modules 下的.bin 文件路径</p><p>7.在项目文件夹下，git bash 中执行 hexo-server,直接访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>参考文章：<br><a href="https://www.jianshu.com/p/957f5631faa9" target="_blank" rel="noopener">https://www.jianshu.com/p/957f5631faa9</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考文章：&lt;a href=&quot;https://www.cnblogs.com/xingyunblog/p/8675681.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/xingyunblog/p/86
      
    
    </summary>
    
    
      <category term="blog" scheme="http://www.starmoon.tech/categories/blog/"/>
    
    
      <category term="hexo windows" scheme="http://www.starmoon.tech/tags/hexo-windows/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 搭建全记录</title>
    <link href="http://www.starmoon.tech/2019/09/11/hexo-build/"/>
    <id>http://www.starmoon.tech/2019/09/11/hexo-build/</id>
    <published>2019-09-11T15:11:46.000Z</published>
    <updated>2019-12-30T14:05:37.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo-搭建全记录"><a href="#Hexo-搭建全记录" class="headerlink" title="Hexo 搭建全记录"></a>Hexo 搭建全记录</h2><blockquote><p>Markdown 本篇文章主要记录 hexo 博客的环境搭建以及到后期功能优化，以及问题修复。</p></blockquote><h3 id="Hexo-安装环境"><a href="#Hexo-安装环境" class="headerlink" title="Hexo 安装环境"></a>Hexo 安装环境</h3><p>Hexo 是一款基于 node 的静态博客网站生成器，使用 Markdown 语法进行博文编辑，相比其他的静态网页生成器而言有着，生成静态网页最快，插件丰富（已经移植了大量 Octopress 插件）</p><p>作为一名 phper 的理解，我们可以将 Nodejs 理解为 php,而 npm 好比 composer,Node.js 主要用于构建后端服务器端应用程序，但作为全栈和前端解决方案，它也非常受欢迎。Npm 则是一个包管理工具。下面提供了<code>三种</code>安装方法：</p><p>一、安装 nodejs 和 npm(从 node source)</p><p>1.启用 NodeSource 存储库：<code>curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</code></p><p>2.安装 nodejs 和 npm:<code>sudo apt install nodejs</code></p><p>3.查看 node 版本：<code>node --version</code></p><p>二、使用 nvm 来安装 nodejs,可以管理 nodejs 的版本：</p><p>1.<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</code></p><p>查看版本：<code>nvm --version</code></p><p>2.nvm 安装 node：<code>nvm install node</code></p><p>3.查看 node 版本：<code>node --version</code></p><p>4.安装最近的 nvm 版本：<code>nvm install --lts</code></p><p>三、从 ubuntu 仓库里安装 node 和 npm 1.<code>sudo apt update</code><br><code>sudo apt install nodejs</code></p><p>2.<code>sudo apt install build-essential</code></p><p>3.如果要卸载和 node 和 npm<code>sudo apt remove nodejs npm</code></p><p>其中第一第三种方法更容易，但是使用 nvm 安装提供最大的灵活性，可以选择或者移除你的 nodejs 版本，可以根据实际情况选择。</p><h3 id="Hexo-主题下载安装"><a href="#Hexo-主题下载安装" class="headerlink" title="Hexo 主题下载安装"></a>Hexo 主题下载安装</h3><p>关于主题安装可以先去 hexo 的主题网站里面挑选比较喜欢的主题，在 github 找到源代码，然后这里我用了 git 子模块来管理主题。</p><p>参考文章：<a href="https://blog.csdn.net/guotianqing/article/details/82391665" target="_blank" rel="noopener">https://blog.csdn.net/guotianqing/article/details/82391665</a></p><p>简单解释下博文里面这条命令：<br><code>git submodule add &lt;url&gt; &lt;path&gt;</code><br><code>url</code>指的是你的 githuburl 为子模块仓库的 url 路径，而<code>path</code>指的是你执行该条命令时文件夹的相对路径。例如，处在/var/www/blog/themes 路径下面执行该条命令，那么就是<code>git submodule add https://.... /theme_name</code></p><p>然后在 hexo 的根目录下面的 theme 文件夹里就可以看到以及管理的你的主题代码。</p><h3 id="Hexo-主题配置及发布博文命令"><a href="#Hexo-主题配置及发布博文命令" class="headerlink" title="Hexo 主题配置及发布博文命令"></a>Hexo 主题配置及发布博文命令</h3><p>关于 hexo 的全局配置在 hexo 根目录下面的站点配置文件<code>_config.yml</code></p><p>而关于主题的相关配置就在 theme 里面的<code>_config.yml</code></p><p>关于使本地代码各项配置项生效发布到网站的操作简要命令就是以下几个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate ==hexo g</span><br><span class="line">hexo deploy ==hexo d</span><br><span class="line">hexo new blog_name(博文标题)</span><br><span class="line"></span><br><span class="line">删除博文，在source/_post/下面直接删除就可以</span><br></pre></td></tr></table></figure><h3 id="Hexo-使用问题小结（不断更新）"><a href="#Hexo-使用问题小结（不断更新）" class="headerlink" title="Hexo 使用问题小结（不断更新）"></a>Hexo 使用问题小结（不断更新）</h3><p>bug1.<code>YAMLException: end of the stream or a document separator is expected at line 2, column 6: title: about</code></p><p>solution:网上看到的结论都是文件中所有冒号后面的空格，格式很严格，必须是只有一个，半角。不管是多了还是少了都会报错，这是 yml 解释器所定义的语法。如果不确定的话，将输入法调整到英文模式，删除所有冒号后面的空格重新输入，不要使用 Tab。<br>但是我反复改正空格之后错误依然存在，问题在于我创建 about 页面时，将</p><figure class="highlight plain"><figcaption><span>about</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date: 2017-05-31 10:05:56</span><br><span class="line">layout: about</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>复制成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--</span><br><span class="line">title: about</span><br><span class="line">date: 2017-05-31 10:05:56</span><br><span class="line">layout: about</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>目前不清楚这个<code>--</code>为何会导致以上错误，这里需要注意不要多出其他字符。</p><p>bug2.`当发现配置的 hexo 博文下方作者头像不能正常显示，404 错误时.F12 使用谷歌浏览器查看图片完整的路径，在相应的文件夹添加图片。如果图片不多，也可以保存在 source/img 文件夹下面，直接使用绝对路径来表示图片路径。</p><p><code>尝试本地source中建立img文件夹` &lt;img src=&quot;img/图片名.jpg&gt; 这里如果显示不出来，请使用&lt;img src=&quot;/img/图片名.jpg&gt;绝对路径</code></p><p>bug3.<code>博文里面图片引入显示失败,hexo博文图片前缀有.com不能正常显示</code></p><p>1.先安装插件<br>npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> –save</p><p>中途出现这个错误，可以忽略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.1 (node_modules/fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.1: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;linux&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules/nunjucks/node_modules/fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.9: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;linux&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br></pre></td></tr></table></figure><p>2.打开_config.yml 文件，修改下述内容<br>post_asset_folder: true</p><p>3.这里以防插件 bug，建议替换一下这个位置的文件/node_modules/hexo-asset-image/index.js</p><p>参考博文：<a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">https://blog.csdn.net/xjm850552586/article/details/84101345</a></p><p>bug4.<code>hexo博客文章里面插入图片后封面图片就不能正常显示</code></p><p><img src="http://localhost:4000/img/pic_bug.jpg" alt><br>尚未解决</p><p>此前使用的主题或许存在缺陷，后面选用了<a href="https://github.com/fi3ework/hexo-theme-archer主题" target="_blank" rel="noopener">https://github.com/fi3ework/hexo-theme-archer主题</a></p><p>4.切换主题后出现了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; 63|                         &lt;span&gt;&lt;%- __(&apos;word_count&apos;) %&gt;: &lt;span class=&quot;post-count word-count&quot;&gt;&lt;%= wordcount(page.content) %&gt;&lt;/span&gt;&lt;%= __(&apos;reading_time&apos;) %&gt;: &lt;span class=&quot;post-count reading-time&quot;&gt;&lt;%= min2read(page.content) %&gt; min&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">   64|                     &lt;/div&gt;</span><br><span class="line">   65|                 &lt;% &#125; %&gt;</span><br><span class="line">   66|                 &lt;div class=&quot;post-intro-meta&quot;&gt;</span><br></pre></td></tr></table></figure><p>wordcount is not defined,于是执行：npm i –save hexo-wordcount</p><p>当时是在 hexo-theme-archer 主题文件夹下面执行的，后面尝试 cd ..在 theme 下面执行 npm i –save hexo-wordcount</p><p>虽然有警告但是安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.1 (node_modules/fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.1: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;linux&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules/nunjucks/node_modules/fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.9: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;linux&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"></span><br><span class="line">+ hexo-wordcount@6.0.1</span><br><span class="line">added 8 packages from 25 contributors, updated 1 package and audited 4872 packages in 13.544s</span><br></pre></td></tr></table></figure><p>5.更新代码之后发现图片显示不出来，但是插件都已经成功安装，最后检查是 git 提交时自动忽略了 public 文件夹下面的东西，所有图片并没有更新在服务器，修改.gitignore 文件，重新 push 图片显示成功</p><p><code>这个操作是错误的，因为hexo clean命令会删除数据库以及public文件夹下面的内容，所以还是建议图片存在其他文件夹下面</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hexo-搭建全记录&quot;&gt;&lt;a href=&quot;#Hexo-搭建全记录&quot; class=&quot;headerlink&quot; title=&quot;Hexo 搭建全记录&quot;&gt;&lt;/a&gt;Hexo 搭建全记录&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Markdown 本篇文章主要记录 hexo 博客
      
    
    </summary>
    
    
      <category term="blog" scheme="http://www.starmoon.tech/categories/blog/"/>
    
    
      <category term="hexo build" scheme="http://www.starmoon.tech/tags/hexo-build/"/>
    
  </entry>
  
</feed>
